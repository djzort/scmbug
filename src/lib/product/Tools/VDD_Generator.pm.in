# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


package @DEVEL_PRODUCT_NAME@::Tools::VDD_Generator;

use strict;
use Getopt::Long;
use Data::Dumper;
use Cwd;
use @DEVEL_PRODUCT_NAME@::Activity;
use @DEVEL_PRODUCT_NAME@::Error;
use @DEVEL_PRODUCT_NAME@::Glue::Glue;
use @DEVEL_PRODUCT_NAME@::Tools::SCM_Functions;
use @DEVEL_PRODUCT_NAME@::Tools::SCM_Description;
use @DEVEL_PRODUCT_NAME@::VDD;
use @DEVEL_PRODUCT_NAME@::Common;
use @DEVEL_PRODUCT_NAME@::Connection;


my $VDD_DEFAULT_OUTPUT_FILE_XML = "vdd.xml";
my $VDD_DEFAULT_OUTPUT_FILE_SGML = "vdd.sgml";
my $VDD_DEFAULT_OUTPUT_DIRECTORY = "vdd_output";

my $vdd_configuration;
my $glue_configuration;
my $arguments;




# Constructor
sub new {
    my $type = shift;
    my $self = {};

    bless $self, $type;

    $arguments->{ from_version } = "";
    $arguments->{ to_version } = "";
    $arguments->{ scm_name } = "";
    $arguments->{ repository_path } = "";
    $arguments->{ product_name } = "";
    $arguments->{ user } = get_username();
    $arguments->{ output_directory } = "$VDD_DEFAULT_OUTPUT_DIRECTORY";
    $arguments->{ stylesheet_file } = "@datadir@/@DEVEL_PRODUCT_NAME_LOWER@/glue/templates/stylesheets/vdd.xsl";

    return $self;
}



#
# Processes a VDD Generation request
#
sub process {
    my $self = shift;
    my ( @args ) = ( @_ );
    my $original_dir = getcwd();

    parse_arguments();
    check_arguments();

    @DEVEL_PRODUCT_NAME@::Tools::SCM_Functions::checkout_repository( $vdd_configuration->{ scm_description } );

    my $glue_configuration_file = @DEVEL_PRODUCT_NAME@::Tools::SCM_Functions::glue_configuration_file( $vdd_configuration->{ scm_description } );

    my $glue = @DEVEL_PRODUCT_NAME@::Glue::Glue->new();
    $glue->read_configuration( $glue_configuration_file );
    $glue->check_configuration();

    # Make sure the tools we need are available
    my $required_tools;
    $required_tools->{ '@DEVEL_CONFIG_GENERAL_BINARY_XSLTPROC@' } = 1;
    $required_tools->{ '@DEVEL_CONFIG_GENERAL_BINARY_DOCBOOK2HTML@' } = 1;
    $required_tools->{ '@DEVEL_CONFIG_GENERAL_BINARY_DOCBOOK2PDF@' } = 1;
    check_tools( $required_tools, $glue->scm()->binary_paths() );

    my $from_label_date = @DEVEL_PRODUCT_NAME@::Tools::SCM_Functions::get_label_date( $vdd_configuration->{ scm_description }, $glue, $arguments->{ from_version } );
    my $to_label_date = @DEVEL_PRODUCT_NAME@::Tools::SCM_Functions::get_label_date( $vdd_configuration->{ scm_description }, $glue, $arguments->{ to_version } );
    @DEVEL_PRODUCT_NAME@::Tools::SCM_Functions::release_repository();
    chdir $original_dir;

    get_vdd( $from_label_date, $to_label_date, $glue->policies() );
}



sub parse_arguments {
    GetOptions( "from=s" => \$arguments->{ from_version },
	        "to=s" => \$arguments->{ to_version },
		"scm=s" => \$arguments->{ scm_name },
		"repository=s" => \$arguments->{ repository_path },
		"product=s" => \$arguments->{ product_name },
		"user=s" => \$arguments->{ user },
		"output-directory=s" => \$arguments->{ output_directory },
		"dsl=s" => \$arguments->{ stylesheet_file },
	        "help" => \&show_usage_and_exit,
	        "version" => \&show_version_and_exit,
	        "<>", \&parse_arguments_no_such_option
		);
}



#
# Shows the usage instructions and exits
#
sub show_usage_and_exit {    
    usage();
    exit 0;
}



#
# Prints the version of this tool
#
sub show_version_and_exit {
    print "@DEVEL_PRODUCT_NAME@ $PRODUCT_VERSION\n";
    exit 0;
}



#
# Handles the case where an invalid command-line argument is parsed
#
sub parse_arguments_no_such_option {
    my ( $argument_name ) = ( @_ );

    print "Command-line argument \"$argument_name\" is invalid.\n";
    usage();
    exit -1;
}


#
# Parses the command-line arguments
#
sub check_arguments {
    my $errors = 0;

    if ( $arguments->{ from_version } eq "" ) {
	print "Missing required argument --from=<version>\n";
	$errors = 1;
    }

    if ( $arguments->{ to_version } eq "" ) {
	print "Missing required argument --to=<version>\n";
	$errors = 1;
    }

    if ( $arguments->{ scm_name } eq "" ) {
	print "Missing required argument --scm=<scm_name>\n";
	$errors = 1;
    }

    if ( $arguments->{ repository_path } eq "" ) {
	print "Missing required argument --repository=<path>\n";
	$errors = 1;
    }

    if ( $arguments->{ product_name } eq "" ) {
	print "Missing required argument --product=<product_name>\n";
	$errors = 1;
    }

    if ( $errors == 1) {
	usage();
	exit -2;
    } else {
        #
        # Setup logging as soon as possible
        #
        use Log::Log4perl qw(:easy);
        # Setup a really basic logger
        Log::Log4perl::easy_init( $WARN );
        $logger = get_logger( "VDD_Generator" );
        @DEVEL_PRODUCT_NAME@::Common::set_logger( $logger );

	$vdd_configuration->{ scm_description } = @DEVEL_PRODUCT_NAME@::Tools::SCM_Description->new();
	$vdd_configuration->{ scm_description }->repository_path( $arguments->{ repository_path } );
	$vdd_configuration->{ scm_description }->name( $arguments->{ scm_name } );
	$vdd_configuration->{ scm_description }->product_name( $arguments->{ product_name } );
    }
}



#
# Prints a usage message
#
sub usage {
    print "
Usage: @DEVEL_PRODUCT_NAME_LOWER@_vdd_generator [arguments]
  --scm=<scm_name>         Name of the SCM system. The supported tools are 'CVS', 'Subversion'
  --product=<product_name> Name of the product in the bugtracking system
  --repository=<path>      The CVSROOT equivalent. MUST use a file:// prefix for Subversion.
  --from=<version>         Version from which differences are generated
  --to=<version>           Version to which differences are generated
  --user=<username>        User creating the VDD document (default=" . get_username() . ")
  --output-directory=<output_directory> Directory in which all VDD output will be
                           created (default=$VDD_DEFAULT_OUTPUT_DIRECTORY)
  --dsl                    Specify an alternate style sheet
  --help                   This help message
  --version                Print version
";
}



#
# Retrieves the date a label was applied
#
sub retrieve_label_date {
    my ( $label ) = shift;
    my $date;

    $date = @DEVEL_PRODUCT_NAME@::Tools::SCM_Functions::get_label_date( $label );

    return $date;
}



#
# Retrieve the data needed to produce a Version Description Document
#
sub get_vdd {
    my ( $label_date_from, $label_date_to, $policies ) = ( @_ );
    my $activity = @DEVEL_PRODUCT_NAME@::Activity->new();

    # A username is always specified
    $activity->user( $arguments-> { user } );

    # A product name is always specified
    $activity->product_name( $arguments->{ product_name } );

    # Setup a VDD activity
    $activity->name( $ACTIVITY_GET_VDD );
    $activity->{ from_version } = $arguments->{ from_version };
    $activity->{ to_version } = $arguments->{ to_version };
    $activity->{ from_label_date } = $label_date_from;
    $activity->{ to_label_date } = $label_date_to;

    # The log message is discarded by the daemon, but providing one is
    # required by the protocol. It might be useful one day, too
    $activity->log_message( "Creating VDD for " .
			    $arguments->{ product_name } . 
			    " from version " . $arguments->{ from_version } . 
			    " to version " . $arguments->{ to_version } ) ;

    my $connection = @DEVEL_PRODUCT_NAME@::Connection->new();
    my $vdd_data = $connection->process_activity( $activity, $policies, 1 );

    #
    # Save the VDD document
    #
    # First create the output directory
    mkdir $arguments->{ output_directory };
    open OUTPUT, ">" . $arguments->{ output_directory } . "/" . $VDD_DEFAULT_OUTPUT_FILE_XML;
    print OUTPUT $vdd_data;
    close OUTPUT;
    print "VDD XML file generated in " . $arguments->{ output_directory } . "/" . $VDD_DEFAULT_OUTPUT_FILE_XML  . ".\n";


    #
    # Transform the XML VDD into various formats
    #
    my $cmd;
    my $cmd_output;

    print "Producing SGML output in " . $arguments->{ output_directory } . "/" . $VDD_DEFAULT_OUTPUT_FILE_SGML . ".\n";
    $cmd = "@DEVEL_CONFIG_GENERAL_BINARY_XSLTPROC@ -o " . $arguments->{ output_directory } . "/" . $VDD_DEFAULT_OUTPUT_FILE_SGML . " \"" . $arguments->{ stylesheet_file } . "\" " . $arguments->{ output_directory } . "/" . $VDD_DEFAULT_OUTPUT_FILE_XML;


    $cmd_output = execute_command( $cmd );
    print $cmd_output;

    # Read back in the SGML output
    my $sgml_output = file_content( $arguments->{ output_directory } . "/" . $VDD_DEFAULT_OUTPUT_FILE_SGML );
    # Write back a modified SGML document. First, prepend a common header
    my $sgml_header = file_content( "@datadir@/@DEVEL_PRODUCT_NAME_LOWER@/glue/templates/stylesheets/vdd.sgml.header" );
    open OUTPUT, "> " . $arguments->{ output_directory } . "/" . $VDD_DEFAULT_OUTPUT_FILE_SGML;
    print OUTPUT $sgml_header;
    print OUTPUT $sgml_output;
    close OUTPUT;


    #
    # Produce PDF
    #
    print "Producing PDF output in " . $arguments->{ output_directory } . "\n";
    $cmd = "@DEVEL_CONFIG_GENERAL_BINARY_DOCBOOK2PDF@ -o " . $arguments->{ output_directory } . " " . $arguments->{ output_directory } . "/" . $VDD_DEFAULT_OUTPUT_FILE_SGML;
    $cmd_output = execute_command( $cmd );
    print $cmd_output;

    # Produce single-page HTML
    # First, create the output directory
    mkdir $arguments->{ output_directory } . "/html-single";
    print "Producing single-page HTML output in " . $arguments->{ output_directory } . "/html-single\n";
    $cmd = "@DEVEL_CONFIG_GENERAL_BINARY_DOCBOOK2HTML@ -u -o " . $arguments->{ output_directory } . "/html-single " . $arguments->{ output_directory } . "/" . $VDD_DEFAULT_OUTPUT_FILE_SGML;
    $cmd_output = execute_command( $cmd );
    print $cmd_output;

    # Produce multi-page HTML
    # First, create the output directory
    mkdir $arguments->{ output_directory } . "/html-multi";
    print "Producing multi-page HTML output in " . $arguments->{ output_directory } . "/html-multi\n";
    $cmd = "@DEVEL_CONFIG_GENERAL_BINARY_DOCBOOK2HTML@ -o " . $arguments->{ output_directory } . "/html-multi " . $arguments->{ output_directory } . "/" . $VDD_DEFAULT_OUTPUT_FILE_SGML;
    $cmd_output = execute_command( $cmd );
    print $cmd_output;

}



1;
