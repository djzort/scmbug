#
# These macros were copied from Debians /usr/lib/rpm/macros, and
# localstatedir,sysconfdir were changed to something SENSIBLE.
#

#/*! \page config_macros Default configuration: /usr/lib/rpm/macros
# \verbatim
#
# $Id: rpmmacros_orig,v 1.1 2005-11-05 02:05:05 mkgnu Exp $
#
# This is a global RPM configuration file. All changes made here will
# be lost when the rpm package is upgraded. Any per-system configuration
# should be added to /etc/rpm/macros, while per-user configuration should
# be added to ~/.rpmmacros.
#
#==============================================================================
# Macro naming conventions (preliminary):
#
#	Macros that begin with an underscore are "local" in the sense that
#	they (if used) will not be exported in rpm headers. Some macros
#	that don't start with an underscore (but look like they should)
#	are compatible with macros generated by rpm-2.5.x and will be made
#	more consistent in a future release.
#

#==============================================================================
# ---- A macro that expands to nothing.
#
%nil			%{!?nil}

#==============================================================================
# ---- filesystem macros.
#
%_usr			/usr
%_usrsrc		%{_usr}/src
%_var			/var

#==============================================================================
# ---- Generally useful path macros.
#
%__awk			mawk
%__bzip2		/usr/bin/bzip2
%__cat			/bin/cat
%__chgrp		/bin/chgrp
%__chmod		/bin/chmod
%__chown		/bin/chown
%__cp			/bin/cp
%__cpio			/bin/cpio
%__file			/usr/bin/file
%__gpg			/usr/bin/gpg
%__grep			/bin/grep
%__gzip			/bin/gzip
%__id			/usr/bin/id
%__install		/usr/bin/install
%__ln_s			ln -s
%__make			/usr/bin/make
%__mkdir		/bin/mkdir
%__mkdir_p		/bin/mkdir -p
%__mv			/bin/mv
%__patch		/usr/bin/patch
%__perl			/usr/bin/perl
%__pgp			/usr/bin/pgp
%__python		/usr/bin/python
%__rm			/bin/rm
%__rsh			/usr/bin/rsh
%__sed			/bin/sed
%__ssh			/usr/bin/ssh
%__tar			/bin/tar
%__unzip		/usr/bin/unzip

#==============================================================================
# ---- Build system path macros.
#
%__ar			ar
%__as			as
%__cc			gcc
%__cpp			gcc -E
%__cxx			g++
%__ld			/usr/bin/ld
%__nm			/usr/bin/nm
%__objcopy		/usr/bin/objcopy
%__objdump		/usr/bin/objdump
%__ranlib		ranlib
%__remsh		%{__rsh}
%__strip		/usr/bin/strip

# XXX avoid failures if tools are not installed when rpm is built.
%__libtoolize		libtoolize
%__aclocal		aclocal
%__autoheader		autoheader
%__automake		automake
%__autoconf		autoconf

#==============================================================================
# ---- Required rpmrc macros.
#	Macros that used to be initialized as a side effect of rpmrc parsing.
#	These are the default values that can be overridden by other
#	(e.g. per-platform, per-system, per-packager, per-package) macros.
#
#	The directory where sources/patches will be unpacked and built.
%_builddir		%{_topdir}/BUILD

#	The interpreter used for build scriptlets.
%_buildshell		/bin/sh

#	The path to the bzip2 executable (legacy, use %{__bzip2} instead).
%_bzip2bin		%{__bzip2}

#	The location of the rpm database file(s).
%_dbpath		%{_var}/lib/rpm

#	The location of the rpm database file(s) after "rpm --rebuilddb".
%_dbpath_rebuild	%{_dbpath}

%_defaultdocdir		%{_usr}/doc

#
%__find_provides	/usr/lib/rpm/find-provides
%__find_requires	/usr/lib/rpm/find-requires
#%__find_prereq		???
#%__find_conflicts	???
#%__find_obsoletes	???

#
# fixowner, fixgroup, and fixperms are run at the end of hardcoded setup
# These macros are necessary only for legacy compatibility, and have moved
# to per-platform macro configuration (i.e. /usr/lib/rpm/<arch>-<os>/macros)
#%__id_u		%{__id} -u
#%__chown_Rhf		%{__chown} -Rhf
#%__chgrp_Rhf		%{__chgrp} -Rhf
#%_fixowner		[ `%{__id_u}` = '0' ] && %{__chown_Rhf} root
#%_fixgroup		[ `%{__id_u}` = '0' ] && %{__chgrp_Rhf} root
#%_fixperms		%{__chmod} -Rf a+rX,g-w,o-w
#

#	The path to the gzip executable (legacy, use %{__gzip} instead).
%_gzipbin		%{__gzip}

#	The number of changelog entries kept when installing (legacy, unused in
#	rpm-4.0.1 and later).
%_instchangelog		5

#	The path to the pgp executable (legacy, use %{__pgp} instead).
%_pgpbin		%{__pgp}

#	The directory where newly built binary packages will be written.
%_rpmdir		%{_topdir}/RPMS

#	A template used to generate the output binary package file name
#	(legacy).
%_rpmfilename		%{_build_name_fmt}

#	The default signature type.
%_signature		none

#	The directory where sources/patches from a source package will be
#	installed. This is also where sources/patches are found when building.
%_sourcedir		%{_topdir}/SOURCES

#	The directory where the spec file from a source package will be
#	installed.
%_specdir		%{_topdir}/SPECS

#	The directory where newly built source packages will be written.
%_srcrpmdir		%{_topdir}/SRPMS

#	Directory where temporaray files can be created.
%_tmppath		%{_var}/tmp

#	Path to top of build area.
%_topdir		%{_usrsrc}/rpm

#	The path to the unzip executable (legacy, use %{__unzip} instead).
%_unzipbin		%{__unzip}

#==============================================================================
# ---- Optional rpmrc macros.
#	Macros that are initialized as a side effect of rpmrc and/or spec
#	file parsing.
#
#	Configurable build root path, same as BuildRoot: in a specfile.
#	(Note: the configured macro value will override the spec file value).
#
#%buildroot

#	The sub-directory (relative to %{_builddir}) where sources are compiled.
#	This macro is set after processing %setup, either explicitly from the
#	value given to -n or the default name-version.
#
#%buildsubdir

#	Configurable distribution information, same as Distribution: tag in a
#	specfile.
#
#%distribution

#	Configurable distribution URL, same as DistURL: tag in a specfile.
#	The URL will be used to supply reliable information to tools like
#	rpmfind.
#
# Note: You should not configure with disturl (or build packages with
# the DistURL: tag) unless you are willing to supply content in a
# yet-to-be-determined format at the URL specified.
#
#%disturl

#	Boolean (i.e. 1 == "yes", 0 == "no") that controls whether files
#	marked as %doc should be installed.
#%_excludedocs

#	The port and machine name of a FTP proxy host running TIS firewall.
#
#%_ftpport
#%_ftpproxy

#	The signature to use and the location of configuration files for
#	signing packages with GNU gpg.
#
#%_gpg_name
#%_gpg_path

#	The port and machine name of an HTTP proxy host.
#
#%_httpport
#%_httpproxy

#	The PATH put into the environment before running %pre/%post et al.
#
%_install_script_path	/sbin:/bin:/usr/sbin:/usr/bin:/usr/X11R6/bin

#	A colon separated list of desired locales to be installed;
#	"all" means install all locale specific files.
#	
%_install_langs	all

#
#	Deprecated.
#
#%_langpatt

#	A colon separated list of paths where files should *not* be installed.
#	Usually, these are network file system mount points.
#
#%_netsharedpath

#	(experimental)
#	The type of pattern match used on rpmdb iterator selectors:
#	"default"	simple glob-like regex, periods will be escaped,
#			splats will have period prepended, full "^...$" match
#			required. Also, file path tags will use glob(7).
#	"strcmp"	compare strings
#	"regex"		regex(7) patterns using regcomp(3)/regexec(3)
#	"glob"		glob(7) patterns using fnmatch(3)
#
%_query_selector_match	default

#	Configurable packager information, same as Packager: in a specfile.
#
#%packager

#	Compression type and level for source/binary package payloads.
#		"w9.gzdio"	gzip level 9 (default).
#		"w9.bzdio"	bzip2 level 9.
#
#%_source_payload	w9.gzdio
#%_binary_payload	w9.gzdio

#	The signature to use and the location of configuration files for
#	signing packages with PGP.
#
#%_pgp_name
#%_pgp_path

#	Configurable virtual provides (unimplemented, use Provides: ...
#	in an rpmrc file).
#
#%_provides

#	Deprecated.
#
#%_timecheck

#	Configurable vendor information, same as Vendor: in a specfile.
#
#%vendor

#==============================================================================
# ---- Package version macro.
#	The type of package to produce, for compatibility with legacy
#	versions of rpm.
#
# This is an rpm version, e.g. 30005 means to produce packaging compatible
# with rpm-3.0.5. At the moment, values < 30005 (i.e. compatibility with
# version before rpm-3.0.5) are not supported. The only incompatible change
# in rpm packaging since rpm-3.0.5 has been to replace a 3 with a 4 in the
# rpmlead, so there's little need to use any value greater than 30005.
#
%_package_version	30005

#==============================================================================
# ---- Database configuration macros.
#	Macros used to configure Berkley db parameters.
#
# rpmdb macro configuration values are a colon (or white space) separated
# list of tokens, with an optional '!' negation to explicitly disable bit
# values, or a "=value" if a parameter. A per-tag value is used (e.g.
# %_dbi_config_Packages) if defined, otherwise a per-rpmdb default
# (e.g. %_dbi_config). The configuration is also conditioned on the
# existence of an internal %{_rpmdb_rebuild} switch to permit changing
# the configuration while rebuilding an rpmdb database.
#
# The rpmdb configuration tokens are in a popt table in rpmdb/dbconfig.c,
# see that for the latest gory details. Note carefully that, unless you
# are writing an rpm installer, you shouldn't have to touch *any* of these
# parameters.
#
# Here's a short list of the tokens, with a guess of whether the option is
# useful:
#	(nothing)	currently used in rpm, known to work.
#	"+++"		under development, will be supported in rpm eventually.
#	"???"		I have no clue, you're mostly on your own.
#
# If you do find yourself inclined to fiddle, here's what I see (shrug):
# 1) Only the value of mp_size has any serious impact on overall performance,
#    and you will need ~256Kb to handle a typical machine install.
# 2) Only the Packages hash, because of the size of the values (i.e. headers),
#    will ever need tuning. Diddle the pagesize if you're interested, although
#    I believe that you will find pagesize=512 "best".
# 3) Adding nofsync increases speed, but risks total data loss. Fiddle shared
#    and/or mp_size instead.
# 4) btree is faster than hash, but would require some painful rpm release
#    engineering to convert everbody's databases to btree, not gonna happen
#    soon.
#
# See the db3-devel package, or http://www.sleepycat.com for Berkeley db-3.x
# documentation.
#
#   token	works?	Berkeley db flag or value
#==================================================
#---------------------- DBENV->open parameters and tunable values:
#   mp_mmapsize=8Mb	DBENV->set_mp_mmapsize
#   mp_size=512Kb	DBENV->set_cachesize
#---------------------- DBENV->open and DB->open common bits:
#   create		DB_CREATE
#   thread	???	DB_THREAD	(useless w/o posix mutexes on linux)
#---------------------- DBENV->open bits:
#   joinenv		DB_JOIN_ENV
#   mpool		DB_INIT_MPOOL
#   cdb		+++	DB_INIT_CDB
#   txn		???	DB_INIT_TXN
#   log		???	DB_INIT_LOG
#   lock	???	DB_INIT_LOCK
#   recover	???	DB_RECOVER
#   recover_fatal ???	DB_RECOVER_FATAL
#   use_environ	???	DB_USE_ENVIRON
#   use_environ_root ??? DB_USE_ENVIRON_ROOT
#   private	+++	DB_PRIVATE
#   lockdown	???	DB_LOCKDOWN
#   shared	+++	DB_SYSTEM_MEM
#---------------------- DB->open parameters and tunable values:
#   cachesize=512Kb +++	DB->set_cachesize	(meaningless if mp_size is used)
#   pagesize=512 +++	DB->set_pagesize
#---------------------- DB->open bits:
#   excl	???	DB_EXCL
#   nommap	???	DB_NOMMAP
#   rdonly		DB_RDONLY
#---------------------- DB->open types:
#   btree		DB_BTREE
#   hash		DB_HASH
#   recno	???	DB_RECNO
#   queue	???	DB_QUEUE
#   unknown	+++	DB_UNKNOWN
#---------------------- DB->set_flags bits:
#   bt_dup	+++	(btree only) DB_DUP
#   bt_dupsort	+++	(btree only) DB_DUPSORT
#   ht_dup	+++	(hash only) DB_DUP
#   ht_dupsort	+++	(hash only) DB_DUPSORT
#----------------------- rpmdb specific configuration:
#   usecursors		(always on) Use db3 cursors in get/put/del ?
#   usedbenv		(always on) Use db3 environment?
#   verify		(always on, db3 only) Verify db after close?
#   lockdbfd		(always on for Packages) Use fcntl(2) locking ?
#   nofsync		Disable fsync(2) call performed after db3 writes?
#   temporary		Unlink file when closing.
#
# XXX Use a CDB database model for concurrent access (under development,
# cursor teardown with signals needs work, much more besides.)
#%__dbi_other			usedbenv create joinenv cdb mpool \
#				mp_mmapsize=8Mb mp_size=512Kb verify

# XXX Use transactions and logs for rpmdb durability (no clue yet):
#%__dbi_other			usedbenv create joinenv mpool txn log \
#				mp_mmapsize=8Mb mp_size=512Kb verify

# XXX enable at your own risk, CDB access to rpmdb isn't cooked yet.
#%__dbi_cdb			create joinenv cdb mpool

# XXX The "traditional" rpmdb shared/exclusive fcntl(2) lock on Packages model:
%__dbi_other			verify %{?_tmppath:tmpdir=%{_tmppath}} %{?__dbi_cdb}

# Note: adding nofsync here speeds up --rebuilddb a lot.
%__dbi_rebuild			nofsync !log !txn !cdb
%__dbi_transient		%{__dbi_rebuild} temporary private
%__dbi_perms			perms=0644

#
#--- Hash database configuration
%__dbi_htconfig	\
  hash		\
  %{__dbi_other}\
  %{__dbi_perms}\
%{nil}

%__dbi_htconfig_current		%{__dbi_htconfig}
%__dbi_htconfig_rebuild		%{__dbi_htconfig} %{__dbi_rebuild}

%_dbi_htconfig		\
  %{?_rpmdb_rebuild:%{__dbi_htconfig_rebuild}}\
  %{!?_rpmdb_rebuild:%{__dbi_htconfig_current}}\
%{nil}

#
#--- Btree database configuration
%__dbi_btconfig	\
  btree		\
  %{__dbi_other}\
  %{__dbi_perms}\
%{nil}

%__dbi_btconfig_current		%{__dbi_btconfig}
%__dbi_btconfig_rebuild		%{__dbi_btconfig} %{__dbi_rebuild}

%_dbi_btconfig		\
  %{?_rpmdb_rebuild:%{__dbi_btconfig_rebuild}}\
  %{!?_rpmdb_rebuild:%{__dbi_btconfig_current}}\
%{nil}

# The list of tags for which indices will be built.
%_dbi_tags	Packages:Name:Basenames:Group:Requirename:Providename:Conflictname:Triggername:Dirnames:Requireversion:Provideversion:Installtid:Sigmd5:Sha1header:Filemd5s:Depends

# "Packages" should have shared/exclusive fcntl(2) lock using "lockdbfd".
%_dbi_config_Packages		%{_dbi_htconfig} lockdbfd

# "Depends" is a per-transaction cache of known dependency resolutions.
%_dbi_config_Depends		%{_dbi_htconfig} temporary private

%_dbi_config_Dirnames		%{_dbi_btconfig}
%_dbi_config_Requireversion	%{_dbi_btconfig}
%_dbi_config_Provideversion	%{_dbi_btconfig}
%_dbi_config_Installtid		%{_dbi_btconfig}
%_dbi_config_Removetid		%{_dbi_btconfig}

# XXX legacy configuration.
# Choose db interface:
#	3	native db3 interface.
#
# There are two macros so that --rebuilddb can convert db1 -> db3.
#
%_dbapi			3
%_dbapi_rebuild		3

%_dbi_config	%{_dbi_htconfig}

#==============================================================================
# ---- GPG/PGP/PGP5 signature macros.
#	Macro(s) to hold the arguments passed to GPG/PGP for package
#	signing and verification.
#
%__gpg_check_password_cmd	%{__gpg} \
	gpg --batch --no-verbose --passphrase-fd 3 -u "%{_gpg_name}" -so -
%__pgp_check_password_cmd	%{__pgp} \
	pgp +batchmode=on +verbose=0 "%{_pgp_name}" -sf
%__pgp5_check_password_cmd	%{__pgp} \
	pgps +batchmode=on +verbose=0 +armor=off "%{_pgp_name}" -f

%__gpg_sign_cmd			%{__gpg} \
	gpg --batch --no-verbose --no-armor --passphrase-fd 3 \
	-u "%{_gpg_name}" -sbo %{__signature_filename} %{__plaintext_filename}
%__pgp_sign_cmd			%{__pgp} \
	pgp +batchmode=on +verbose=0 +armor=off \
	"+myname=%{_pgp_name}" -sb %{__plaintext_filename} %{__signature_filename}
%__pgp5_sign_cmd		%{__pgp} \
	pgps +batchmode=on +verbose=0 +armor=off \
	"+myname=%{_pgp_name}" -b %{__plaintext_filename} -o %{__signature_filename}

%__gpg_verify_cmd		%{__gpg} \
	gpg --batch --no-verbose --verify \
	%{__signature_filename} %{__plaintext_filename}
%__pgp_verify_cmd		%{__pgp} \
	pgp +batchmode=on +verbose=0 \
	%{__signature_filename} %{__plaintext_filename}
%__pgp5_verify_cmd		%{__pgp} \
	pgpv +batchmode=on +verbose=0 \
	+OutputInformationFD=1 +OutputWarningFD=1 \
	-o %{__signature_filename} %{__plaintext_filename}

#==============================================================================
# ---- Transaction macros.
#	Macro(s) used to parameterize transactions.
#
#	The output binary package file name template used when building
#	binary packages.
#
# XXX	Note: escaped %% for use in headerSprintf()
%_build_name_fmt	%%{ARCH}/%%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm

#	The output binary package file name template used when repackaging
#	erased packages.
#
# XXX	Note: escaped %% for use in headerSprintf()
%_repackage_name_fmt	%%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm

#	The directory in which erased packages will be saved when using
#	the --repackage option.
%_repackage_dir		/var/spool/up2date
%_repackage_root	%{nil}

#	Relations between package names that cause dependency loops
#	with legacy packages that cannot be fixed. Relations are
#	specified as
#		p>q
#	where package p has a Requires: on something that package q Provides:
#
# XXX	Note: that there cannot be any whitespace within the string "p>q",
#	and that both p and q are package names (i.e. no version/release).
#
#%_dependency_whiteout_5_2		\
#	pam>pamconfig
#%_dependency_whiteout_6_1		\
#	pilot-link-devel>pilot-link
#%_dependency_whiteout_6_2		\
#	egcs-c++>libstdc++
%_dependency_whiteout_7_0		\
	pango-gtkbeta-devel>pango-gtkbeta\
	XFree86>Mesa			\
	compat-glibc>db2		\
	compat-glibc>db1		\
	pam>initscripts			\
	initscripts>sysklogd
%_dependency_whiteout_7_1		\
	arts>kdelibs-sound
%_dependency_whiteout_7_2		\
	libgnomeprint15>gnome-print	\
	nautilus>nautilus-mozilla	\
	tcl>postgresql-tcl

%_dependency_whiteout			\
	libtermcap>bash			\
	modutils>vixie-cron		\
	ypbind>yp-tools			\
	ghostscript-fonts>ghostscript	\
	%{?_dependency_whiteout_7_2}	\
	%{?_dependency_whiteout_7_1}	\
	%{?_dependency_whiteout_7_0}	\
	%{?_dependency_whiteout_6_2}	\
	%{?_dependency_whiteout_6_1}	\
	%{?_dependency_whiteout_5_2}	\
	%{nil}

#==============================================================================
# ---- per-platform macros.
#	Macros that are specific to an individual platform. The values here
#	will be used if the per-platform macro file does not exist..
#
%_arch			i386
%_build_arch		i386
%_vendor		rpm
%_os			linux
%_gnu			-gnu
%_target_platform	%{_target_cpu}-%{_vendor}-%{_target_os}%{?_gnu}

#
# Define a generic value for optflags. Normally overridden by per-target macros.
%optflags		-O2

#
# Define per-arch and per-os defaults. Normally overridden by per-target macros.
%__arch_install_post	%{nil}
%__os_install_post	%{___build_post}

#==============================================================================
# ---- Scriptlet template templates.
#	Global defaults used for building scriptlet templates.
#

%___build_shell		%{?_buildshell:%{_buildshell}}%{!?_buildshell:/bin/sh}
%___build_args		-e
%___build_cmd		%{?_sudo:%{_sudo} }%{?_remsh:%{_remsh} %{_remhost} }%{?_remsudo:%{_remsudo} }%{?_remchroot:%{_remchroot} %{_remroot} }%{___build_shell} %{___build_args}
%___build_pre	\
  RPM_SOURCE_DIR=\"%{u2p:%{_sourcedir}}\"\
  RPM_BUILD_DIR=\"%{u2p:%{_builddir}}\"\
  RPM_OPT_FLAGS=\"%{optflags}\"\
  RPM_ARCH=\"%{_arch}\"\
  RPM_OS=\"%{_os}\"\
  export RPM_SOURCE_DIR RPM_BUILD_DIR RPM_OPT_FLAGS RPM_ARCH RPM_OS\
  RPM_DOC_DIR=\"%{_docdir}\"\
  export RPM_DOC_DIR\
  RPM_PACKAGE_NAME=\"%{name}\"\
  RPM_PACKAGE_VERSION=\"%{version}\"\
  RPM_PACKAGE_RELEASE=\"%{release}\"\
  export RPM_PACKAGE_NAME RPM_PACKAGE_VERSION RPM_PACKAGE_RELEASE\
  %{?buildroot:RPM_BUILD_ROOT=\"%{u2p:%{buildroot}}\"\
  export RPM_BUILD_ROOT}\
  \
  %{verbose:set -x}%{!verbose:exec > /dev/null}\
  umask 022\
  cd %{u2p:%{_builddir}}\


#%___build_body		%{nil}
%___build_post		exit 0

%___build_template	#!%{___build_shell}\
%{___build_pre}\
%{nil}

#%{___build_body}\
#%{___build_post}\
#%{nil}

#==============================================================================
# ---- Scriptlet templates.
#	Macro(s) that expand to a command and script that is executed.
#	CAVEAT: All macro expansions must fit in a BUFSIZ (8192 byte) buffer.
#
%__spec_prep_shell	%{___build_shell}
%__spec_prep_args	%{___build_args}
%__spec_prep_cmd	%{___build_cmd}
%__spec_prep_pre	%{___build_pre}
%__spec_prep_body	%{___build_body}
%__spec_prep_post	%{___build_post}
%__spec_prep_template	#!%{__spec_prep_shell}\
%{__spec_prep_pre}\
%{nil}

#%{__spec_prep_body}\
#%{__spec_prep_post}\
#%{nil}

%__spec_build_shell	%{___build_shell}
%__spec_build_args	%{___build_args}
%__spec_build_cmd	%{___build_cmd}
%__spec_build_pre	%{___build_pre}
%__spec_build_body	%{___build_body}
%__spec_build_post	%{___build_post}
%__spec_build_template	#!%{__spec_build_shell}\
%{__spec_build_pre}\
%{nil}

#%{__spec_build_body}\
#%{__spec_build_post}\
#%{nil}

%__spec_install_shell	%{___build_shell}
%__spec_install_args	%{___build_args}
%__spec_install_cmd	%{___build_cmd}
%__spec_install_pre	%{___build_pre}
%__spec_install_body	%{___build_body}
%__spec_install_post\
%{__arch_install_post}\
%{__os_install_post}\
%{nil}
%__spec_install_template	#!%{__spec_install_shell}\
%{__spec_install_pre}\
%{nil}

#%{__spec_install_body}\
#%{__spec_install_post}\
#%{nil}

#%__spec_autodep_shell	%{___build_shell}
#%__spec_autodep_args	%{___build_args}
#%__spec_autodep_cmd	%{___build_cmd}
#%__spec_autodep_pre	%{___build_pre}
#%__spec_autodep_body	%{___build_body}
#%__spec_autodep_post	%{___build_post}
#%__spec_autodep_template	#!%{__spec_autodep_shell}\
#%{__spec_autodep_pre}\
#%{nil}

#%{__spec_autodep_body}\
#%{__spec_autodep_post}\
#%{nil}

%__spec_clean_shell	%{___build_shell}
%__spec_clean_args	%{___build_args}
%__spec_clean_cmd	%{___build_cmd}
%__spec_clean_pre	%{___build_pre}
%__spec_clean_body	%{___build_body}
%__spec_clean_post	%{___build_post}
%__spec_clean_template	#!%{__spec_clean_shell}\
%{__spec_clean_pre}\
%{nil}

#%{__spec_clean_body}\
#%{__spec_clean_post}\
#%{nil}

%__spec_rmbuild_shell	%{___build_shell}
%__spec_rmbuild_args	%{___build_args}
%__spec_rmbuild_cmd	%{___build_cmd}
%__spec_rmbuild_pre	%{___build_pre}
%__spec_rmbuild_body	%{___build_body}
%__spec_rmbuild_post	%{___build_post}
%__spec_rmbuild_template	#!%{__spec_rmbuild_shell}\
%{__spec_rmbuild_pre}\
%{nil}

#%{__spec_rmbuild_body}\
#%{__spec_rmbuild_post}\
#%{nil}

# XXX We don't expand pre/post install scriptlets (yet).
#%__spec_pre_pre		%{nil}
#%__spec_pre_post		%{nil}
#%__spec_post_pre		%{nil}
#%__spec_post_post		%{nil}
#%__spec_preun_pre		%{nil}
#%__spec_preun_post		%{nil}
#%__spec_postun_pre		%{nil}
#%__spec_postun_post		%{nil}
#%__spec_triggerpostun_pre	%{nil}
#%__spec_triggerpostun_post	%{nil}
#%__spec_triggerun_pre		%{nil}
#%__spec_triggerun_post		%{nil}
#%__spec_triggerin_pre		%{nil}
#%__spec_triggerin_post		%{nil}

#==============================================================================
# ---- configure macros.
#	Macro(s) slavishly copied from autoconf's config.status.
#
%_prefix		/usr
%_exec_prefix		%{_prefix}
%_bindir		%{_exec_prefix}/bin
%_sbindir		%{_exec_prefix}/sbin
%_libexecdir		%{_exec_prefix}/libexec
%_datadir		%{_prefix}/share
%_sysconfdir		/etc
%_sharedstatedir	%{_prefix}/com
%_localstatedir		/var
%_lib			lib
%_libdir		%{_exec_prefix}/%{_lib}
%_includedir		%{_prefix}/include
%_oldincludedir		/usr/include
%_infodir		%{_prefix}/info
%_mandir		%{_prefix}/man

#==============================================================================
# ---- config.guess platform macros.
#	Macro(s) similar to the tokens used by configure.
#
%_build			%{_host}
%_build_alias		%{_host_alias}
%_build_cpu		%{_host_cpu}
%_build_vendor		%{_host_vendor}
%_build_os		%{_host_os}
%_host			i686-pc-linux-gnu
%_host_alias		%{nil}
%_host_cpu		i686
%_host_vendor		pc
%_host_os		linux-gnu
%_target		%{_host}
%_target_alias		%{_host_alias}
%_target_cpu		%{_host_cpu}
%_target_vendor		%{_host_vendor}
%_target_os		%{_host_os}

#==============================================================================
# ---- specfile macros.
#	Macro(s) here can be used reliably for reproducible builds.
#	(Note: Above is the goal, below are the macros under development)
#
# The configure macro does the following:
#	optionally change to a subdirectory (not implemented).
#	attempt to update config.guess and config.sub.
#	run configure with correct prefix, platform, and CFLAGS.
#	optionally restore current directory (not implemented).
# The configure macro should be invoked as %configure (rather than %{configure})
# because the rest of the arguments will be expanded using %*.
#
# This is the version of %configure used through rpm-3.0.4.
#%configure	\
#  %{?__libtoolize:[ -f configure.in ] && %{__libtoolize} --copy --force} \
#  CFLAGS="%{optflags}" ./configure %{_target_platform} --prefix=%{_prefix}
#
#------------------------------------------------------------------------------
# This is an improved version of %configure (from PLD team).
%configure \
  CFLAGS="${CFLAGS:-%optflags}" ; export CFLAGS ; \
  CXXFLAGS="${CXXFLAGS:-%optflags}" ; export CXXFLAGS ; \
  FFLAGS="${FFLAGS:-%optflags}" ; export FFLAGS ; \
  %{?__libtoolize:[ -f configure.in ] && %{__libtoolize} --copy --force ;} \
  ./configure \\\
	%{?_gnu: --host=%{_host} --target=%{_target_platform}} \\\
	%{!?_gnu: %{_target_platform}} \\\
 	--prefix=%{_prefix} \\\
	--exec-prefix=%{_exec_prefix} \\\
	--bindir=%{_bindir} \\\
	--sbindir=%{_sbindir} \\\
	--sysconfdir=%{_sysconfdir} \\\
	--datadir=%{_datadir} \\\
	--includedir=%{_includedir} \\\
	--libdir=%{_libdir} \\\
	--libexecdir=%{_libexecdir} \\\
	--localstatedir=%{_localstatedir} \\\
	--sharedstatedir=%{_sharedstatedir} \\\
	--mandir=%{_mandir} \\\
	--infodir=%{_infodir}

#------------------------------------------------------------------------------
# The make install analogue of %configure:
%makeinstall \
  make \\\
	prefix=%{?buildroot:%{buildroot}}%{_prefix} \\\
	exec_prefix=%{?buildroot:%{buildroot}}%{_exec_prefix} \\\
	bindir=%{?buildroot:%{buildroot}}%{_bindir} \\\
	sbindir=%{?buildroot:%{buildroot}}%{_sbindir} \\\
	sysconfdir=%{?buildroot:%{buildroot}}%{_sysconfdir} \\\
	datadir=%{?buildroot:%{buildroot}}%{_datadir} \\\
	includedir=%{?buildroot:%{buildroot}}%{_includedir} \\\
	libdir=%{?buildroot:%{buildroot}}%{_libdir} \\\
	libexecdir=%{?buildroot:%{buildroot}}%{_libexecdir} \\\
	localstatedir=%{?buildroot:%{buildroot}}%{_localstatedir} \\\
	sharedstatedir=%{?buildroot:%{buildroot}}%{_sharedstatedir} \\\
	mandir=%{?buildroot:%{buildroot}}%{_mandir} \\\
	infodir=%{?buildroot:%{buildroot}}%{_infodir} \\\
  install

#------------------------------------------------------------------------------
# The GNUconfigure macro does the following:
#       update config.guess and config.sub.
#       regenerate all autoconf/automake files
#       optionally change to a directory (make the directory if requested).
#       run configure with correct prefix, platform, and CFLAGS.
#       optionally restore current directory.
#
# Based on autogen.sh from GNOME and orginal GNUconfigure
#
%GNUconfigure(MCs:)      \
  CFLAGS="${CFLAGS:-%optflags}" ; export CFLAGS; \
  LDFLAGS="${LDFLAGS:-%{-s:-s}}"  ; export LDFLAGS; \
  %{-C:_mydir="`pwd`"; %{-M: %{__mkdir} -p %{-C*};} cd %{-C*}} \
  dirs="`find ${_mydir} -name configure.in -print`"; export dirs; \
    for coin in `echo ${dirs}` \
do \
  dr=`dirname ${coin}`; \
if test -f ${dr}/NO-AUTO-GEN; then \
 : \
else \
     macrodirs=`sed -n -e 's,AM_ACLOCAL_INCLUDE(\(.*\)),\1,gp' < ${coin}`; \
    ( cd ${dr}; \
      aclocalinclude="${ACLOCAL_FLAGS}"; \
      for k in ${macrodirs}; do \
        if test -d ${k}; then \
          aclocalinclude="${aclocalinclude} -I ${k}"; \
        ##else \
        ##  echo "**Warning**: No such directory \`${k}'.  Ignored." \
        fi \
      done \
      if grep "^AM_GNU_GETTEXT" configure.in >/dev/null; then \
        if grep "sed.*POTFILES" configure.in >/dev/null; then \
          : do nothing -- we still have an old unmodified configure.in \
        else \
          test -r ${dr}/aclocal.m4 || touch ${dr}/aclocal.m4; \
          echo "no" | gettextize --force --copy; \
          test -r ${dr}/aclocal.m4 && %{__chmod} u+w ${dr}/aclocal.m4; \
        fi \
      fi \
      if grep "^AM_PROG_LIBTOOL" configure.in >/dev/null; then \
        %{__libtoolize} --force --copy; \
      fi \
      aclocal ${aclocalinclude}; \
      if grep "^AM_CONFIG_HEADER" configure.in >/dev/null; then \
        %{__autoheader}; \
      fi \
      echo "Running automake --gnu ${am_opt} ..."; \
      %{__automake} --add-missing --gnu ${am_opt}; \
      %{__autoconf}; \
    ); \
  fi \
done \
  %{-C:${_mydir}}%{!-C:.}/configure %{_target_platform} --prefix=%{_prefix} --exec-prefix=%{_exec_prefix} --bindir=%{_bindir} --sbindir=%{_sbindir} --sysconfdir=%{_sysconfdir} --datadir=%{_datadir} --includedir=%{_includedir} --libdir=%{_libdir} --libexecdir=%{_libexecdir} --localstatedir=%{_localstatedir} --sharedstatedir=%{_sharedstatedir} --mandir=%{_mandir} --infodir=%{_infodir} %* ; \
  %{-C:cd ${_mydir}; unset _mydir}

#------------------------------------------------------------------------------
# Useful perl macros (from Artur Frysiak <wiget@t17.ds.pwr.wroc.pl>)
#
# For example, these can be used as (from ImageMagick.spec from PLD site)
#	[...]
#	BuildPrereq: perl
#	[...]
#	%package perl
#	Summary: libraries and modules for access to ImageMagick from perl
#	Group: Development/Languages/Perl
#	Requires: %{name} = %{version}
#	%requires_eq    perl
#	[...]
#	%install
#	rm -fr $RPM_BUILD_ROOT
#	install -d $RPM_BUILD_ROOT/%{perl_sitearch}
#	[...]
#	%files perl
#	%defattr(644,root,root,755)
#	%{perl_sitearch}/Image
#	%dir %{perl_sitearch}/auto/Image
#
%requires_eq()	%(LC_ALL="C" echo '%*' | xargs -r rpm -q --qf 'Requires: %%{name} = %%{epoch}:%%{version}\\n' | sed -e 's/ (none):/ /' -e 's/ 0:/ /' | grep -v "is not")
%perl_sitearch	%(eval "`perl -V:installsitearch`"; echo $installsitearch)
%perl_archlib	%(eval "`perl -V:installarchlib`"; echo $installarchlib)

#------------------------------------------------------------------------------
# arch macro for all Intel i?86 compatibile processors
#  (Note: This macro (and it's analogues) will probably be obsoleted when
#   rpm can use regular expressions against target platforms in macro
#   conditionals.
#
%ix86   i386 i486 i586 i686 athlon

#------------------------------------------------------------------------
# Use in %install to generate locale specific file lists. For example,
#
# %install
# ...
# %find_lang %{name}
# ...
# %files -f %{name}.lang
#
%find_lang	/usr/lib/rpm/find-lang.sh %{buildroot}

# \endverbatim
#*/
